	/*to store last \n at the end of l
	}
		}
			exit(1);
			printf("%c ", data);
		if(indx == 0) {
		data = data_line->curr_line[indx++];
		}
			indx = 0;
			data_line = data_line->rem_line;
		if(indx == MAX_CHAR_IN_LINE) {
		fputc(data, fdd);
	while(data != '\n') {
	char data = data_line->curr_line[indx++];
	int indx = 0;
	line *data_line = &tmp->line;

	w->head = w->head->next;
	tmp = w->head;
	node_l* tmp;
void load_next_line(win *w, FILE *fdd) {
 */
 * fdd: file descripter to store line which is to be removed.
 * used to load next line at last, after removing first line.
/*


}
	return;
	lne->rem_line = NULL;
	}
		tmp_1 = tmp_2;
		tmp_1->rem_line = NULL;
		free(tmp_1);
		else tmp_2 = NULL;
			tmp_2 = tmp_1->rem_line;
		if(tmp_1->rem_line) 
	while(tmp_1) {
	line* tmp_2;
	line* tmp_1 = lne->rem_line;
void free_rem_lines(line* lne) {


}
        }
		lne = &(line_node->line);
		line_node = line_node->next;
                }
			printf("%c", c);
                                c = lne->curr_line[indx++];
                        if(indx < MAX_CHAR_IN_LINE)
                        }
                                indx = 0;
                                lne = lne->rem_line;
					break;
				if(lne->rem_line == NULL)
                        if(indx == MAX_CHAR_IN_LINE) {
                while(c != '\n') {
		int indx = 0;
		char c = 1;
	for(int i = 0; i < w.tot_lines; i++) {

        line *lne = &(line_node->line);
        line_node = w.head;
	node_l *line_node;
void print(win w) {


}
	return fd;	

	}
		lne = &(line_node->line);
		line_node = line_node->next;
		}
			}
				break;
				lne->curr_line[indx] = '\n';
			if(c == '\n') {
			lne->curr_line[indx++] = c;
			
			}
				indx = 0;
				lne = lne->rem_line;
				lne->rem_line = empty_line;
				*empty_line = init_line();

				empty_line = (line*)malloc(sizeof(line));
			if(indx == MAX_CHAR_IN_LINE) {
		while(c = fgetc(fd)) {
		lne->curr_line = (char*)malloc(sizeof(char) * MAX_CHAR_IN_LINE);
		int indx = 0;
	for(int i = 0; i < w->tot_lines; i++) {
	fd = fopen(filename, "r");

	line *lne = &(line_node->line);
	line_node = w->head;
	/*use to point node of current line*/
	node_l *line_node;

	line *empty_line;
	char arr[MAX_CHAR_IN_LINE];
	char c;
	FILE *fd;
	exit(1);
FILE* load_file(win *w, char *filename) {

}
	return empty_line;
	empty_line.rem_line = NULL;
	empty_line.curr_line = (char*)malloc(sizeof(char) * MAX_CHAR_IN_LINE);
	line empty_line;
line init_line() {

*/
}
	return;
	init_one_win(w->next_buff, tot_lines);
	//init next window
	init_one_win(w->prev_buff, tot_lines);
	//init prev window
	init_one_win(window, tot_lines);
	//init main window

	window->load_rem = 0;
	window->tot_lines = tot_lines;
	window->head = w->head;
	win_buff *window;
void init_window(win *w, int tot_lines) {
//should be use in main fun to initalise window with next and prev buff
/*

}
	return;
                insertBegin(&w->next_buff->head, empty_line);
	for(int i=0; i<tot_lines; i++)
                insertBegin(&w->prev_buff->head, empty_line);
	for(int i=0; i<tot_lines; i++)
		insertBegin(&w->head, empty_line);
	for(int i=0; i<tot_lines; i++)

	w->next_buff_load_rem = w->prev_buff_load_rem = 0;

	w->prev_buff = &prev;
	w->next_buff = &next;
	w->tot_lines = tot_lines;
	w->head = NULL;
	/*initialise window structure*/
